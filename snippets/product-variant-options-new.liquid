{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block
  %}
{% endcomment %}
{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

{{ 'variant-map.js' | asset_url | script_tag }}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {%- if block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option.selected_value == value %}
        checked
      {% endif %}
      {% if option_disabled %}
        class="disabled"
      {% endif %}
    >
    <label class="variant-value" for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
    style="border-radius: 10px; padding: 0; display: inline-flex; text-transform: uppercase;">
    <span class="js-variant-display" data-variant-value="{{ value | escape }}"></span>
    <span class="js-variant-color" style="display: none;"></span>
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
    </label>

    <!-- Start Product Form -->
<form action="/cart/add" method="post" enctype="multipart/form-data" id="{{ product_form_id }}" novalidate="novalidate">
  {%- unless product.has_only_default_variant -%}
    {%- render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id -%}
    <!-- Hidden input to store the selected variant ID -->
    <input type="hidden" name="id" class="product-variant-id" value="{{ product.selected_or_first_available_variant.id }}">
  {%- endunless -%}

  <!-- Add to Cart Button -->
  <button type="submit" name="add" class="product-form__cart-submit" {% unless product.available %}disabled{% endunless %}>
    <span>{{ 'products.product.add_to_cart' | t }}</span>
  </button>
</form>
<!-- End Product Form -->

  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option
      value="{{ value | escape }}"
      {% if option.selected_value == value %}
        selected="selected"
      {% endif %}
    >
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>
  {%- endif -%}
{%- endfor -%}

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const variantElements = document.querySelectorAll('.js-variant-display');
  
    variantElements.forEach(el => {
      const originalValue = el.getAttribute('data-variant-value');
      const type = determineType(originalValue); // Implement this function based on your requirements
      const mappedValue = variantMap[type] && variantMap[type][originalValue];
  
      if (type === 'colors' && mappedValue) {
        // Set the background color to the hex code and display the color's name
        el.closest('.variant-value').style.backgroundColor = mappedValue;
        el.textContent = originalValue;
      } else {
        // For non-color types, display the mapped value or the original value
        el.textContent = mappedValue || originalValue;
      }
    });
  });
  
  function determineType(value) {
    // Implement the logic to determine if the value is a color, size, etc.
    if (variantMap.colors[value]) {
      return 'colors';
    } else if (variantMap.sizes[value]) {
      return 'sizes';
    } else {
      return 'other'; // Default or other types
    }
  }  


  
  </script>

  <script>
document.addEventListener('DOMContentLoaded', function() {
  const variantSelectors = document.querySelectorAll('[name="options[Color]"], [name="options[Size]"]'); // Adjust based on your actual option names
  const addToCartButton = document.querySelector('.product-form__cart-submit');
  const variantIdInput = document.querySelector('.product-variant-id');

  variantSelectors.forEach(selector => {
    selector.addEventListener('change', function() {
      const selectedOption = document.querySelector('input[type="radio"][name="options[Color]"]:checked, select[name="options[Size]"] option:checked'); // Update selector as needed
      variantIdInput.value = selectedOption.value;
      addToCartButton.disabled = !selectedOption.dataset.available;
    });
  });
});
</script>
