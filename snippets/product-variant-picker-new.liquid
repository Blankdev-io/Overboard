{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{% style %}
  .variant-value-new {
    width: 35px;
    height: 35px;
    font-size: 14px;
  }

  .variant-value {
    cursor: pointer;
    border: 2px solid transparent; /* Default state with transparent border */
    padding: 5px; /* Padding for better visual appearance */
    margin: 2px; /* Space between variant options */
  }

  .variant-value.selected {
    border-color: #333; /* Border color when selected */
  }

  .variant-value.variant-unavailable {
    opacity: 0.5;
    cursor: not-allowed;
  }
{% endstyle %}
{%- unless product.has_only_default_variant -%}
  {%- if block.settings.picker_type == 'button' -%}
    <variant-radios
      id="variant-radios-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <fieldset class="js product-form__input">
          <legend
            class="form__label"
            style="    font-family: Plus Jakarta Sans,sans-serif!important; color: black; font-size: 19px;"
          >
            {{ option.name }}
          </legend>
          {% render 'product-variant-options-new', product: product, option: option, block: block %}
        </fieldset>
      {%- endfor -%}
      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-radios>

  {%- else -%}
    {{ 'variant-map.js' | asset_url | script_tag }}

    <form
      action="/cart/add"
      method="post"
      enctype="multipart/form-data"
      id="{{ product_form_id }}"
      novalidate="novalidate"
      style="width:100%"
    >
      {% for option in product.options_with_values %}
        <div class="variant-option">
          <h3>{{ option.name }}</h3>
          <div class="variant-values">
            {% for value in option.values %}
              {% assign variant_found = false %}
              {% for variant in product.variants %}
                {% if variant.options contains value and variant.available %}
                  <div
                    class="variant-value variant-value-new"
                    data-value="{{ value }}"
                    data-option="{{ option.name }}"
                    data-variant-id="{{ variant.id }}"
                    data-variant-price="{{ variant.price | money }}"
                    data-variant-image="{{ variant.featured_image | default: product.featured_image | img_url: 'master' }}"
                  >
                    <!-- Showing the value for clarity -->
                  </div>
                  {% assign variant_found = true %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {% unless variant_found %}
                <div
                  class="variant-value variant-value-new variant-unavailable"
                  data-value="{{ value }}"
                  data-option="{{ option.name }}"
                >
                  <!-- Showing the value for clarity, even if unavailable -->
                </div>
              {% endunless %}
            {% endfor %}
          </div>
        </div>
      {% endfor %}

      <!-- Hidden input to store selected variant ID -->
      <input type="hidden" name="id" class="product-variant-id">

      <!-- Add to Cart Button -->
      <button
        type="submit"
        name="add"
        class="overboard-buy-button button button--full-width button--secondary product-form__cart-submit"
        style="min-height: 33px; font-size: 14px; background-color: black !important; color: white !important; height: 33px !important; text-transform: uppercase; font-family: Plus Jakarta Sans, sans-serif !important;"
        {% unless product.available %}
          disabled
        {% endunless %}
      >
        <span>{{ 'products.product.add_to_cart' | t }}</span>
      </button>
    </form>
  {%- endif -%}
{%- endunless -%}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const variantOptions = document.querySelectorAll('.variant-value.variant-value-new:not(.variant-unavailable)');

    variantOptions.forEach((option) => {
      option.addEventListener('click', function () {
        if (!this.classList.contains('variant-unavailable')) {
          updateVariantSelection(this);
        }
      });
    });

    function updateVariantSelection(element) {
      const selectedOption = element.dataset.option;
      const selectedValue = element.dataset.value;
      const variantId = element.getAttribute('data-variant-id');
      const variantPrice = element.getAttribute('data-variant-price');
      const variantImageSrc = element.getAttribute('data-variant-image');
      const optionGroups = document.querySelectorAll('.variant-values');

      // Update UI within the same option group
      element
        .closest('.variant-values')
        .querySelectorAll('.variant-value')
        .forEach((v) => {
          v.classList.remove('selected');
        });
      element.classList.add('selected');

      // Update other options based on selected option
      optionGroups.forEach((group) => {
        if (group !== element.closest('.variant-values')) {
          updateOptionAvailability(group, selectedOption, selectedValue);
        }
      });

      // Update hidden input, image, and price
      const variantInput = document.querySelector('.product-variant-id');
      const productImage = document.querySelector('.product__media img');
      const productPrice = document.querySelector('.price-item');

      variantInput.value = variantId;
      if (productImage && variantImageSrc) productImage.src = variantImageSrc;
      if (productPrice) productPrice.textContent = variantPrice;
      document.querySelector('.product-form__cart-submit').disabled = false;
    }

    function updateOptionAvailability(group, selectedOption, selectedValue) {
      const allVariants = JSON.parse(document.getElementById('variant-json').textContent);
      group.querySelectorAll('.variant-value').forEach((option) => {
        const optionName = option.dataset.option;
        const value = option.dataset.value;
        const combinations = allVariants.filter(
          (variant) => variant.options[selectedOption] === selectedValue && variant.options[optionName] === value
        );
        if (combinations.length === 0) {
          option.classList.add('variant-unavailable');
          option.disabled = true;
        } else {
          option.classList.remove('variant-unavailable');
          option.disabled = false;
        }
      });
    }
  });
</script>

<script id="variant-json" type="application/json">
  {{ product.variants | json }}
</script>
