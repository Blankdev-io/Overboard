{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{% style %}
  .variant-value-new {
    width: 29px;
    height: 29px;
    font-size: 11px;
  }

  .variant-option {
    height: 60px;
  }

  .variant-value {
    cursor: pointer;
    border: 2px solid transparent; /* Default state with transparent border */
    padding: 5px; /* Padding for better visual appearance */
    margin: 2px; /* Space between variant options */
  }

  .variant-value.selected {
    border-color: #333; /* Border color when selected */
  }

  .variant-value.variant-unavailable {
    cursor: not-allowed;
    background-color: #f0f0f0;
    color: #ccc;
    border-color: #ccc;
    opacity: 0.5;
  }
  .variant-value.variant-unavailable {
    background-image: linear-gradient(
      45deg,
      #f0f0f0 25%,
      #ccc 25%,
      #ccc 50%,
      #f0f0f0 50%,
      #f0f0f0 75%,
      #ccc 75%,
      #ccc 100%
    );
    background-size: 10px 10px;
  }
{% endstyle %}
{%- unless product.has_only_default_variant -%}
  <form
    action="/cart/add"
    method="post"
    enctype="multipart/form-data"
    novalidate="novalidate"
    style="width: 100% !important;"
  >
    {% for option in product.options_with_values %}
      <div class="variant-option" data-option-name="{{ option.name }}">
        <h3>{{ option.name }}</h3>
        <div class="variant-values" style="display: inline-flex;">
          {% for value in option.values %}
            {% assign variant_found = false %}
            {% for variant in product.variants %}
              {% if variant.options contains value and variant.available %}
                <div
                  class="variant-value variant-value-new"
                  data-product-id="{{ product.id }}"
                  data-value="{{ value }}"
                  data-option="{{ option.name }}"
                  data-variant-id="{{ variant.id }}"
                  data-variant-price="{{ variant.price | money }}"
                  data-available="true"
                  data-variant-image="{{ variant.featured_image | default: product.featured_image | img_url: 'master' }}"
                >
                  <!-- Placeholder for the value, filled by JavaScript -->
                </div>
                {% assign variant_found = true %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% unless variant_found %}
              <div
                class="variant-value variant-value-new variant-unavailable"
                data-product-id="{{ product.id }}"
                data-value="{{ value }}"
                data-option="{{ option.name }}"
                data-variant-id="{{ variant.id }}"
                data-available="false"
                data-variant-image="{{ variant.featured_image | default: product.featured_image | img_url: 'master' }}"
              >
                <!-- Placeholder for the value, filled by JavaScript -->

                {% if option.name == 'Size' %}
                  {{ value }}
                {% else %}
                  <p>x</p>
                {% endif %}
              </div>
            {% endunless %}
          {% endfor %}
        </div>
      </div>
    {% endfor %}

    <!-- Hidden input to store selected variant ID -->
    <input type="hidden" name="id" class="product-variant-id" data-variant-productid="{{ product.id }}">

    <!-- Add to Cart Button -->
    <button
      type="submit"
      name="add"
      style="
        min-height: 30px; font-size: 14px; background-color: black !important;
        color: white !important;
        height: 30px !important;
        text-transform: uppercase;
        font-family: Plus Jakarta Sans, sans-serif !important;
      "
      class="overboard-buy-button button button--full-width button--secondary product-form__cart-submit"
      {% unless product.available %}
        disabled
      {% endunless %}
    >
      <span>{{ 'products.product.add_to_cart' | t }}</span>
    </button>
  </form>

  <script>
    let variantsAvailability = {};

    document.addEventListener('DOMContentLoaded', function () {
      initializeProductCards();
    });

    function initializeProductCards() {
      document.querySelectorAll('.product-card-wrapper').forEach(setupProductCard);
    }

    function setupProductCard(card) {
      let productID = card.getAttribute('data-product-id');
      let variantState = {};
      let variantCount = card.querySelectorAll('.variant-option').length;
      let variantOptions = card.querySelectorAll('.variant-value[data-product-id="' + productID + '"]');
      let productPrice = card.querySelector('.price-item[data-price-productid="' + productID + '"]');
      let variantInput = card.querySelector('.product-variant-id[data-variant-productid="' + productID + '"]');

      variantsAvailability[productID] = {}; // Initialize state for this product

      variantOptions.forEach((option) =>
        setupVariantOption(option, variantState, variantOptions, productPrice, variantInput, card, productID)
      );

      selectFirstAvailableVariant(card);
    }

    function setupVariantOption(option, variantState, variantOptions, productPrice, variantInput, card, productID) {
      let value = option.getAttribute('data-value');
      let variantType = option.getAttribute('data-option');
      let variantId = option.getAttribute('data-variant-id');
      let variantPrice = option.getAttribute('data-variant-price');
      let isAvailable = option.getAttribute('data-available') === 'true';

      // Update the global variants availability object
      if (!variantsAvailability[productID][variantType]) {
        variantsAvailability[productID][variantType] = {};
      }
      variantsAvailability[productID][variantType][value] = {
        available: isAvailable,
        variantId: variantId,
        variantPrice: variantPrice,
      };

      styleVariantOption(option, value);

      if (!variantId) {
        markOptionAsUnavailable(option);
      } else {
        option.addEventListener('click', function () {
          updateSelections(
            option,
            variantType,
            variantId,
            variantPrice,
            variantOptions,
            variantState,
            variantInput,
            productPrice,
            card,
            productID
          );
        });
      }
    }

    function styleVariantOption(option, value) {
      if (variantMap.colors[value]) {
        option.style.backgroundColor = variantMap.colors[value];
      } else if (variantMap.sizes[value]) {
        option.textContent = variantMap.sizes[value];
        option.classList.add('text-type');
      } else {
        option.textContent = value;
        option.classList.add('text-type');
      }
    }

    function markOptionAsUnavailable(option) {
      option.classList.add('variant-unavailable');
      option.style.pointerEvents = 'none';
      option.style.opacity = '0.5';
    }

    function updateSelections(
      option,
      variantType,
      variantId,
      variantPrice,
      variantOptions,
      variantState,
      variantInput,
      productPrice,
      card,
      productID
    ) {
      variantOptions.forEach((opt) => {
        if (opt.getAttribute('data-option') === variantType) {
          opt.classList.remove('selected');
        }
      });
      option.classList.add('selected');

      variantState[variantType] = variantId;
      variantInput.value = variantId;

      console.log('Variant Input', variantInput); // Check if the input element is correctly selected
      console.log('Variant State', variantState); // Check the current state of the variant picker

      if (productPrice && variantPrice) {
        productPrice.textContent = variantPrice;
      }

      if (Object.keys(variantState).length === variantOptions.length) {
        const finalVariantId = computeFinalVariantId(variantState);
        console.log('Final Variant ID:', finalVariantId);

        variantInput.value = finalVariantId;
      }

      updateVariantAvailability(card, variantType, productID);
    }

    function updateVariantAvailability(card, selectedOptionType, selectedOptionValue, productID) {
      const options = variantsAvailability; // Assuming this is the root object you're working with

      Object.keys(options).forEach((optionType) => {
        if (optionType !== selectedOptionType) {
          // Skip the currently selected type
          const elements = card.querySelectorAll(`.variant-value[data-option="${optionType}"]`);
          elements.forEach((element) => {
            const value = element.getAttribute('data-value');
            const variantInfo = options[optionType][value];

            // Check if the selected option's variantId matches any other option's variantId to determine availability
            let isAvailable = false;
            if (variantInfo && variantInfo.variantId === options[selectedOptionType][selectedOptionValue].variantId) {
              isAvailable = variantInfo.available;
            }

            element.classList.toggle('variant-unavailable', !isAvailable);
            element.style.pointerEvents = isAvailable ? 'auto' : 'none';
          });
        }
      });
    }

    function selectFirstAvailableVariant(card) {
      const firstAvailableVariant = card.querySelector('.variant-value:not(.variant-unavailable)');
      if (firstAvailableVariant) {
        firstAvailableVariant.click();
      }
    }

    function computeFinalVariantId(state) {
      return Object.values(state).join('-');
    }
  </script>
{%- endunless -%}
