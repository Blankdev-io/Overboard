{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{% style %}
  .variant-value-new {
    width: 35px;
    height: 35px;
    font-size: 14px;
  }

  .variant-value {
    cursor: pointer;
    border: 2px solid transparent; /* Default state with transparent border */
    padding: 5px; /* Padding for better visual appearance */
    margin: 2px; /* Space between variant options */
  }

  .variant-value.selected {
    border-color: #333; /* Border color when selected */
  }

  .variant-value.variant-unavailable {
    opacity: 0.5;
    cursor: not-allowed;
  }
{% endstyle %}
{%- unless product.has_only_default_variant -%}
  <script src="{{ 'variant-map.js' | asset_url }}" defer></script>
  <form
    id="form-{{ product.id }}"
    action="/cart/add"
    method="post"
    enctype="multipart/form-data"
    novalidate="novalidate"
  >
    {% for option in product.options_with_values %}
      <div class="variant-option">
        <h3>{{ option.name }}</h3>
        <div class="variant-values">
          {% for value in option.values %}
            {% assign variant_found = false %}
            {% for variant in product.variants %}
              {% if variant.options contains value and variant.available %}
                <div
                  class="variant-value variant-value-new"
                  data-value="{{ value }}"
                  data-option="{{ option.name }}"
                  data-variant-id="{{ variant.id }}"
                  data-variant-price="{{ variant.price | money }}"
                  data-variant-image="{{ variant.featured_image | default: product.featured_image | img_url: 'master' }}"
                  onclick="updateVariantSelection(this)"
                >
                  <!-- Placeholder for the value, filled by JavaScript -->
                </div>
                {% assign variant_found = true %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% unless variant_found %}
              <div
                class="variant-value variant-value-new variant-unavailable"
                data-value="{{ value }}"
                data-option="{{ option.name }}"
              >
                <!-- Placeholder for the value, filled by JavaScript -->
              </div>
            {% endunless %}
          {% endfor %}
        </div>
      </div>
    {% endfor %}

    <!-- Hidden input to store selected variant ID -->
    <input type="hidden" name="id" class="product-variant-id">

    <!-- Add to Cart Button -->
    <button
      type="submit"
      name="add"
      class="overboard-buy-button button button--full-width button--secondary product-form__cart-submit"
      {% unless product.available %}
        disabled
      {% endunless %}
      style="
        min-height: 30px; font-size: 14px; background-color: black;
        color: white; height: 30px; text-transform: uppercase;
        font-family: 'Plus Jakarta Sans', sans-serif;
      "
    >
      <span>{{ 'products.product.add_to_cart' | t }}</span>
    </button>
  </form>

  <script>
    function updateVariantSelection(element) {
      // Adjusting the closest method to target 'card__content' which seems like the closest logical container based on your HTML
      const productCard = element.closest('.card__content');

      if (!productCard) {
        console.error('Product card container not found!');
        return; // Exit the function if productCard is null
      }

      var variantId = element.getAttribute('data-variant-id');
      var variantPrice = element.getAttribute('data-variant-price');
      var variantImageSrc = element.getAttribute('data-variant-image');

      // Find the variant input within the card
      const variantInput = productCard.querySelector('.product-variant-id');
      if (variantInput) variantInput.value = variantId;

      // Find and update the price display within the card
      const priceDisplay = productCard.querySelector('.price-item');
      if (priceDisplay) priceDisplay.textContent = variantPrice;

      // Optionally update the product image within the card
      const productImage = productCard.querySelector('.product__media img');
      if (productImage) productImage.src = variantImageSrc;

      // Enable the Add to Cart button if the variant is available
      const cartButton = productCard.querySelector('.product-form__cart-submit');
      if (cartButton) cartButton.disabled = false;
    }

    document.addEventListener('DOMContentLoaded', function () {
      const variantOptions = document.querySelectorAll('.variant-value');
      variantOptions.forEach((option) => {
        option.addEventListener('click', function () {
          if (!this.classList.contains('variant-unavailable')) {
            updateVariantSelection(this);
          }
        });
      });

      // Automatically select the first available variant in each product card
      document.querySelectorAll('.product-card').forEach((card) => {
        const firstAvailableVariant = card.querySelector('.variant-value:not(.variant-unavailable)');
        if (firstAvailableVariant) {
          firstAvailableVariant.click();
        }
      });
    });
  </script>
{%- endunless -%}
