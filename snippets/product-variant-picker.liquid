{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  {%- if block.settings.picker_type == 'button' -%}
    
    <variant-radios
      id="variant-radios-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <fieldset class="js product-form__input">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options', product: product, option: option, block: block %}
        </fieldset>
      {%- endfor -%}
      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-radios>

    {%- elsif block.settings.picker_type == 'dropdown' -%}
    
    <variant-selects
      id="variant-selects-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <div class="product-form__input product-form__input--dropdown">
          <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
          <div class="select">
            <select
              id="Option-{{ section.id }}-{{ forloop.index0 }}"
              class="select__select"
              name="options[{{ option.name | escape }}]"
              form="{{ product_form_id }}"
            >
              {% render 'product-variant-options', product: product, option: option, block: block %}
            </select>
            {% render 'icon-caret' %}
          </div>
        </div>
      {%- endfor -%}

      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-selects>
    
    {%- elsif block.settings.picker_type == 'list' and product.tags contains 'Boards' -%}

    <table class="variant-table">
      <tr>
        {% for option in product.options %}
          <th>{{ option }}</th>
        {% endfor %}
        <th>In Stock</th>
      </tr>
  
      {% for variant in product.variants %}
        <tr class="variant-row{% if variant.available %}{% else %} variant-unavailable{% endif %}"
          data-variant-id="{{ variant.id }}"
          data-variant-price="{{ variant.price | money }}"
          data-variant-image="{{ variant.featured_image | default: product.featured_image | img_url: 'master' }}">
          {% for option in variant.options %}
            <td>{{ option }}</td>
          {% endfor %}
          <td>
            {% if variant.available %}
              <span class="stock-pill available">
                {% if variant.inventory_management == 'shopify' %}
                  {{ variant.inventory_quantity }} in stock 
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M13.78 4.22a.75.75 0 00-1.06-1.06L6 9.88 3.28 7.16a.75.75 0 10-1.06 1.06l3.25 3.25c.3.3.77.3 1.06 0l7.25-7.25z"/></svg>
                {% else %}
                  In stock
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M13.78 4.22a.75.75 0 00-1.06-1.06L6 9.88 3.28 7.16a.75.75 0 10-1.06 1.06l3.25 3.25c.3.3.77.3 1.06 0l7.25-7.25z"/></svg>
                {% endif %}
              </span>
            {% else %}
              <span class="stock-pill unavailable">
                Not in stock
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M8.53 8l3.25-3.25a.75.75 0 00-1.06-1.06L7.47 6.94 4.22 3.69a.75.75 0 00-1.06 1.06L6.44 8l-3.25 3.25a.75.75 0 001.06 1.06L7.47 9.06l3.25 3.25a.75.75 0 001.06-1.06L8.53 8z"/></svg>
              </span>
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </table>
                
<script>
document.addEventListener('DOMContentLoaded', function() {
  var variantRows = document.querySelectorAll('.variant-row');
  var variantInput = document.querySelector('.product-variant-id');
  var defaultSelected = false;

  variantRows.forEach(function(row) {
    var variantId = row.getAttribute('data-variant-id');

    if (!row.classList.contains('variant-unavailable')) {
      row.addEventListener('click', function() {
        var variantId = this.getAttribute('data-variant-id');
        if (variantInput) {
          variantInput.value = variantId;
        };
        // Update all rows to default border style
        variantRows.forEach(function(r) {
          r.style.borderTop = 'none';
          r.style.borderLeft = 'none';
          r.style.borderRight = 'none';
          r.style.borderBottom = '1px solid #ddd';
        });

        // Highlight the selected row
        row.style.border = '2px solid black';

        // Update the price
        var price = row.getAttribute('data-variant-price');
        document.querySelector('.price-item').textContent = price;

        // Get variant data
        var variantImageSrc = row.getAttribute('data-variant-image');
  
        // Update product image if variant has an image
        if (variantImageSrc) {
          var productImage = document.querySelector('.product__media img');
          if (productImage) {
            productImage.src = variantImageSrc;
            // Update srcset attribute if necessary
            productImage.srcset = variantImageSrc;
          }
        }

        // Update Shopify's variant selector (if used)
        var variantSelect = document.querySelector('select[name=id]');
        if (variantSelect) {
          variantSelect.value = variantId;
        }
      });

      // Automatically select the first available variant
      if (!defaultSelected) {
        row.click();
        defaultSelected = true;
      }
    } else {
      row.style.pointerEvents = 'none';
    }
  });
});

</script>

  {%- else -%}

  {{ 'variant-map.js' | asset_url | script_tag }}

{% for option in product.options_with_values %}
  <div class="variant-option">
    <h3>{{ option.name }}</h3>
    <div class="variant-values">
      {% for value in option.values %}
        {% assign variant_found = false %}
        {% for variant in product.variants %}
          {% if variant.options contains value and variant.available %}
            <div class="variant-value" data-value="{{ value }}" data-option="{{ option.name }}"
              data-variant-id="{{ variant.id }}"
              data-variant-price="{{ variant.price | money }}"
              data-variant-image="{{ variant.featured_image | default: product.featured_image | img_url: 'master' }}">
              <!-- Placeholder for the value, filled by JavaScript -->
            </div>
            {% assign variant_found = true %}
            {% break %}
          {% endif %}
        {% endfor %}
        {% unless variant_found %}
          <div class="variant-value variant-unavailable" data-value="{{ value }}" data-option="{{ option.name }}">
            <!-- Placeholder for the value, filled by JavaScript -->
          </div>
        {% endunless %}
      {% endfor %}
    </div>
  </div>
{% endfor %}


  <script>
document.addEventListener('DOMContentLoaded', function() {
  const variantOptions = document.querySelectorAll('.variant-value');
  const productImage = document.querySelector('.product__media img');
  const productPrice = document.querySelector('.price-item');
  const variantSelect = document.querySelector('select[name=id]');
  let selectedOptions = {};

  function updateVariantSelection() {
    const matchingVariant = findMatchingVariant(selectedOptions);
    if (matchingVariant) {
      // Update Shopify's variant selector
      variantSelect.value = matchingVariant.id;
      variantSelect.dispatchEvent(new Event('change'));

      // Update the price
      productPrice.textContent = matchingVariant.price;

      // Update the product image if available
      if (matchingVariant.image && productImage) {
        productImage.src = matchingVariant.image;
        productImage.srcset = matchingVariant.image;
      }
    }
  }

  function findMatchingVariant(selectedOptions) {
    return Array.from(variantSelect.options).find(option => {
      let variantData = JSON.parse(option.getAttribute('data-json'));
      return Object.entries(selectedOptions).every(([key, value]) => 
        variantData[key] === value);
    });
  }

  variantOptions.forEach(option => {
    option.addEventListener('click', function() {
      const optionType = option.getAttribute('data-option');
      const value = option.getAttribute('data-value');

      // Update selected options
      selectedOptions[optionType] = value;

      // Highlight the selected option
      variantOptions.forEach(opt => {
        if (opt.getAttribute('data-option') === optionType) {
          opt.classList.remove('selected');
        }
      });
      option.classList.add('selected');

      // Update variant selection based on chosen options
      updateVariantSelection();
    });
  });

  // Initialize with the first available variant
  if (variantSelect.options.length > 0) {
    let initialVariantData = JSON.parse(variantSelect.options[0].getAttribute('data-json'));
    Object.keys(initialVariantData).forEach(key => {
      selectedOptions[key] = initialVariantData[key];
      let initialOption = Array.from(variantOptions).find(opt => 
        opt.getAttribute('data-option') === key && opt.getAttribute('data-value') === initialVariantData[key]);
      if (initialOption) {
        initialOption.click();
      }
    });
  }
});

  </script>
                  
  {%- endif -%}
{%- endunless -%}

<noscript class="product-form__noscript-wrapper-{{ section.id }}">
  <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
    <label class="form__label" for="Variants-{{ section.id }}">
      {{- 'products.product.product_variants' | t -}}
    </label>
    <div class="select">
      <select
        name="id"
        id="Variants-{{ section.id }}"
        class="select__select"
        form="{{ product_form_id }}"
      >
        {%- for variant in product.variants -%}
          <option
            {% if variant == product.selected_or_first_available_variant %}
              selected="selected"
            {% endif %}
            {% if variant.available == false %}
              disabled
            {% endif %}
            value="{{ variant.id }}"
          >
            {%- liquid
              echo variant.title
              echo variant.price | money | strip_html | prepend: ' - '
              if variant.available == false
                echo 'products.product.sold_out' | t | prepend: ' - '
              endif
              if variant.quantity_rule.increment > 1
                echo 'products.product.quantity.multiples_of' | t: quantity: variant.quantity_rule.increment | prepend: ' - '
              endif
              if variant.quantity_rule.min > 1
                echo 'products.product.quantity.minimum_of' | t: quantity: variant.quantity_rule.min | prepend: ' - '
              endif
              if variant.quantity_rule.max != null
                echo 'products.product.quantity.maximum_of' | t: quantity: variant.quantity_rule.max | prepend: ' - '
              endif
              # TODO: enable theme-check once `item_count_for_variant` is accepted as valid filter
              # theme-check-disable
              assign cart_quantity = cart | item_count_for_variant: variant.id
              # theme-check-enable
              if cart_quantity > 0
                echo 'products.product.quantity.in_cart_html' | t: quantity: cart_quantity | prepend: ' - '
              endif
            -%}
          </option>
        {%- endfor -%}
      </select>
      {% render 'icon-caret' %}
    </div>
  </div>
</noscript>
